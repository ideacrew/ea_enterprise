version: "3.9"

x-mayan-container:
  &mayan-container
  depends_on:
    - postgresql
    - redis
    - rabbitmq
  env_file:
    - ./site/mayan/.env_file
  environment:
    # MAYAN_CELERY_BROKER_URL: amqp://${MAYAN_RABBITMQ_USER:-guest}:${MAYAN_RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/${MAYAN_RABBITMQ_VHOST:-event_source}
    MAYAN_CELERY_BROKER_URL: amqp://${MAYAN_RABBITMQ_USER:-guest}:${MAYAN_RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/${MAYAN_RABBITMQ_VHOST:-event_source}
    # To use RabbitMQ as broker, disable Redis as broker
    # MAYAN_CELERY_BROKER_URL: redis://:${MAYAN_REDIS_PASSWORD:-mayanredispassword}@redis:6379/0
    MAYAN_CELERY_RESULT_BACKEND: redis://:${MAYAN_REDIS_PASSWORD:-mayanredispassword}@redis:6379/1
    MAYAN_DATABASES: "{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'${MAYAN_DATABASE_NAME:-mayan}','PASSWORD':'${MAYAN_DATABASE_PASSWORD:-mayandbpass}','USER':'${MAYAN_DATABASE_USER:-mayan}','HOST':'${MAYAN_DATABASE_HOST:-postgresql}'}}"
    # MAYAN_DOCKER_WAIT: "${MAYAN_DATABASE_HOST:-postgresql}:5432 redis:6379"
    MAYAN_LOCK_MANAGER_BACKEND: mayan.apps.lock_manager.backends.redis_lock.RedisLock
    MAYAN_LOCK_MANAGER_BACKEND_ARGUMENTS: "{'redis_url':'redis://:${MAYAN_REDIS_PASSWORD:-mayanredispassword}@redis:6379/2'}"
    # Replace with the line below when using RabbitMQ
    MAYAN_DOCKER_WAIT: "${MAYAN_DATABASE_HOST:-postgresql}:5432 redis:6379 rabbitmq:5672"
  image: ${MAYAN_DOCKER_IMAGE_NAME:-mayanedms/mayanedms}:${MAYAN_DOCKER_IMAGE_TAG:-s4.0}
  networks:
    - bridge
  restart: unless-stopped
  volumes:
    - ${MAYAN_APP_VOLUME:-mayan}:/var/lib/mayan
    # Optional volumes to access external data like staging or watch folders
    # - /opt/staging_files:/staging_files
    # - /opt/watch_folder:/watch_folder

services:
  #
  # Infrastructure Services
  #
  mongodb:
    build: ./site/mongodb
    container_name: mongo
    # env_file:
    #   - ./site/mongodb/.env
    restart: unless-stopped
    volumes:
      - mongodb:/data/db/
      - mongodb:/data/var/log/mongodb/
      - ./site/mongodb/mongod.conf:/etc/mongod.conf
      - ./site/mongodb/initdb.d/:/docker-entrypoint-initdb.d/
    networks:
      - bridge
    ports:
      - 27017:27017

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    volumes:
      - ./site/mongo-express/docker-entrypoint.sh:/docker-entrypoint.sh
    env_file:
      - ./site/.env
      - ./site/mongo-express/.env
    environment:
      ME_CONFIG_MONGODB_SERVER: "${ME_CONFIG_MONGODB_SERVER:-mongo}"
      ME_CONFIG_MONGODB_PORT: "${ME_CONFIG_MONGODB_PORT}"
      ME_CONFIG_MONGODB_URL: "${ME_CONFIG_MONGODB_URL:-mongodb://${ME_CONFIG_MONGODB_SERVER}:${ME_CONFIG_MONGODB_PORT}/}"
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "${ME_CONFIG_MONGODB_ENABLE_ADMIN:-true}"
    depends_on:
      - mongodb
    networks:
      - bridge
    ports:
      - 8081:8081

  rabbitmq:
    build: ./site/rabbitmq
    hostname: rabbitmq
    restart: unless-stopped
    env_file:
      - ./site/rabbitmq/rabbitmq.env
    networks:
      - bridge
    volumes:
      - rabbitmq_etc:/etc/rabbitmq/
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_logs:/var/log/rabbitmq/
      - ./site/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - ./site/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - bridge
    ports:
      - 5672:5672
      - 15672:15672

  redis:
    command:
      - redis-server
      - --appendonly
      - "no"
      - --databases
      - "3"
      - --maxmemory
      - "100mb"
      - --maxclients
      - "500"
      - --maxmemory-policy
      - "allkeys-lru"
      - --save
      - ""
      - --tcp-backlog
      - "256"
      - --requirepass
      - "${MAYAN_REDIS_PASSWORD:-mayanredispassword}"
    image: redis:${MAYAN_DOCKER_REDIS_TAG:-6.0-alpine}
    networks:
      - bridge
    restart: unless-stopped
    volumes:
      - ${MAYAN_REDIS_VOLUME:-redis}:/data

  # redis:
  #   build: ./site/redis
  #   container_name: redis
  #   environment:
  #     - ALLOW_EMPTY_PASSWORD=yes
  #   networks:
  #     - bridge
  #   ports:
  #     - 6379:6379

  # Mayan DMS
  mayan:
    <<: *mayan-container
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`www.example.com`)"  # Replace this with your published URL
      - "traefik.http.routers.mayan.rule=Host(`mayan.app`)"
      - "traefik.http.routers.mayan.entrypoints=web"
    ports:
      - "80:8000"

  postgresql:
    command:
      - "postgres"
      - "-c"
      - "checkpoint_completion_target=0.6"
      - "-c"
      - "default_statistics_target=200"
      - "-c"
      - "maintenance_work_mem=128MB"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "work_mem=8MB"
    environment:
      POSTGRES_DB: ${MAYAN_DATABASE_NAME:-mayan}
      POSTGRES_PASSWORD: ${MAYAN_DATABASE_PASSWORD:-mayandbpass}
      POSTGRES_USER: ${MAYAN_DATABASE_USER:-mayan}
    image: postgres:${MAYAN_DOCKER_POSTGRES_TAG:-10.15-alpine}
    networks:
      - bridge
    # Disable to allow external access to the database.
    # ports:
    #  - "5432:5432"
    restart: unless-stopped
    volumes:
      - ${MAYAN_POSTGRES_VOLUME:-postgres}:/var/lib/postgresql/data

  # Run a frontend gunicorn container
  frontend:
    <<: *mayan-container
    command:
      - run_worker
      - fast
    ports:
      - "81:8000"
    profiles:
      - extra_frontend


  #
  # Microservices
  #
  enroll:
    build:
      context: ../enroll
      dockerfile: ../ea_enterprise/site/enroll_service/Dockerfile
      args:
        BUNDLER_VERSION_OVERRIDE: '2.2.12'
    image: enroll:dev-0.1.0
    volumes:
      - ../enroll:/enroll
      - gem_cache:/usr/local/bundle/2.5
      - node_modules_cache:/enroll/node_modules
      - packs_cache:/enroll/public/packs
    env_file:
      - ./site/.env
      - ./site/rabbitmq/rabbitmq.env
    depends_on:
      - mongodb
      - rabbitmq
      - redis
    networks:
      - bridge
    ports:
      - "3002:3000"

    command: bash -c "rm -rf tmp/pids/server.pid && mkdir -p tmp/pids && bundle install && bundle exec rails server --port 3000 --binding 0.0.0.0"
    # command: bash -c "rm -f tmp/pids/server.pid && mkdir -p tmp/pids && yarn install --check-files && bundle install && bundle exec puma -C config/puma.rb"
    # command: bash -c "rm -f tmp/pids/server.pid && mkdir -p tmp/pids && yarn install --check-files && bundle exec rails assets:precompile && bundle exec puma -C config/puma.rb"
    # command: bash -c "bundle exec puma -C config/puma.rb"

  fdsh_gateway:
    build:
      context: ../fdsh_gateway
      dockerfile: ../ea_enterprise/site/fdsh_gateway_service/Dockerfile
    image: fdsh_gateway:dev-0.1.0
    volumes:
      - ../fdsh_gateway:/fdsh_gateway
      - gem_cache:/usr/local/bundle/2.7.2
    env_file:
      - ./site/.env
      - ./site/rabbitmq/rabbitmq.env
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - bridge
    command: bash -c "rm -rf tmp/pids/server.pid && mkdir -p tmp/pids && bundle install && bin/rails server --port 3006 --binding 0.0.0.0"
    ports:
      - "3006:3006"

  medicaid_gateway:
    build:
      context: ../medicaid_gateway
      dockerfile: ../ea_enterprise/site/medicaid_gateway_service/Dockerfile
    image: medicaid_gateway:dev-0.1.0
    volumes:
      - ../medicaid_gateway:/medicaid_gateway
      - gem_cache:/usr/local/bundle/2.7.2
    env_file:
      - ./site/.env
      - ./site/rabbitmq/rabbitmq.env
      - ./site/medicaid_gateway_service/.env
    networks:
      - bridge
    depends_on:
      - mongodb
      - rabbitmq
      - redis
      - mitc
    ports:
      - "3005:3005"
    command: bash -c "rm -f tmp/pids/server.pid && mkdir -p tmp/pids && bundle install && bin/rails server --port 3005 --binding 0.0.0.0"

  mitc:
    build:
      context: ../medicaid_eligibility
      dockerfile: ../ea_enterprise/site/mitc_service/Dockerfile
    image: mitc:dev-0.1.0
    volumes:
      - ../medicaid_eligibility:/mitc
      - gem_cache:/usr/local/bundle/2.3
      - type: tmpfs
        target: /mitc/tmp/pids/
    networks:
      - bridge
    command: bash -c "bin/rails server --port 3001 --binding 0.0.0.0"
    ports:
      - "3001:3001"

  polypress:
    build:
      context: ../polypress
      dockerfile: ../ea_enterprise/site/polypress_service/Dockerfile
    image: polypress:dev-0.1.0
    command: bundle install
    volumes:
      - ../polypress:/polypress
      - gem_cache:/usr/local/bundle/2.7.2
      # - yarn_cache:/yarn
      # - node_modules_cache:/polypress/node_modules
    env_file:
      - ./site/.env
      - ./site/rabbitmq/rabbitmq.env
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - bridge
    ports:
      - "3003:3003"
    command: bash -c "rm -f tmp/pids/server.pid && mkdir -p tmp/pids && bundle install && bin/rails server --port 3003 --binding 0.0.0.0"

networks:
  bridge:

volumes:
  mitc:
  mayan:
  redis:
  gem_cache:
  # yarn_cache:
  node_modules_cache:
  packs_cache:
  mongodb:
  postgres:
  rabbitmq_etc:
  rabbitmq_data:
  rabbitmq_logs:
